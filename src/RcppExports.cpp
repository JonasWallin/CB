// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// c_basis1_cpp
Rcpp::List c_basis1_cpp(Eigen::MappedSparseMatrix<double> A);
RcppExport SEXP _CB_c_basis1_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(c_basis1_cpp(A));
    return rcpp_result_gen;
END_RCPP
}
// c_basis2_cpp
Rcpp::List c_basis2_cpp(Eigen::MappedSparseMatrix<double> A, double eps_limit);
RcppExport SEXP _CB_c_basis2_cpp(SEXP ASEXP, SEXP eps_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type eps_limit(eps_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(c_basis2_cpp(A, eps_limit));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
Eigen::SparseMatrix<double> likelihood(Eigen::SparseMatrix<double> Q);
RcppExport SEXP _CB_likelihood(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(Q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CB_c_basis1_cpp", (DL_FUNC) &_CB_c_basis1_cpp, 1},
    {"_CB_c_basis2_cpp", (DL_FUNC) &_CB_c_basis2_cpp, 2},
    {"_CB_likelihood", (DL_FUNC) &_CB_likelihood, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
